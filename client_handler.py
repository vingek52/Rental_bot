from datetime import datetime, date
from http import client
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import FSInputFile, Message, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, ReplyKeyboardRemove
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from typing import List
from database.models import Order


client_router = Router()


def start_kb():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–ö–æ–º–Ω–∞—Ç–∞ 1", callback_data="room1"))
    builder.add(types.InlineKeyboardButton(text="–ö–æ–º–Ω–∞—Ç–∞ 2", callback_data="room2"))
    builder.add(types.InlineKeyboardButton(text="–ö–æ–º–Ω–∞—Ç–∞ 3", callback_data="room3"))
    builder.add(types.InlineKeyboardButton(text="–î–≤–æ—Ä", callback_data="yard"))
    builder.add(types.InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about"))
    builder.add(types.InlineKeyboardButton(text="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="popular_questions"))
    builder.adjust(1)
    return builder.as_markup()

def go_order():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data="order_start"))
    builder.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="start_menu"))
    builder.adjust(1)
    return builder.as_markup()



@client_router.message(Command("start"))
async def start_menu(message: types.Message):
    await message.answer_photo(photo = "https://cdn2.divan.ru/img/v1/sf9i8YRoVw34ZNh4LXzWT7om6dloRy_sUaEK3_8MNps/rs:fit:1920:1440:0:0/g:ce:0:0/bg:ffffff/q:85/czM6Ly9kaXZhbi9ja2VkaXRvci93aWtpLWFydGljbGUvMjU3MC82M2M1NWQ5OTY3ODhiLmpwZw.jpg",
                               caption = "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è –∂–∏–ª—å—è –≤ –º–æ–∏—Ö —Ö–æ—Ä–æ–º–∞—Ö, –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", reply_markup=start_kb())





@client_router.callback_query(F.data == "start_menu")
async def start(callback: CallbackQuery):
    await callback.message.answer_photo(photo = "https://cdn2.divan.ru/img/v1/sf9i8YRoVw34ZNh4LXzWT7om6dloRy_sUaEK3_8MNps/rs:fit:1920:1440:0:0/g:ce:0:0/bg:ffffff/q:85/czM6Ly9kaXZhbi9ja2VkaXRvci93aWtpLWFydGljbGUvMjU3MC82M2M1NWQ5OTY3ODhiLmpwZw.jpg",
                            caption = "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è –∂–∏–ª—å—è –≤ –º–æ–∏—Ö —Ö–æ—Ä–æ–º–∞—Ö, –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", reply_markup=start_kb())
    #await callback.answer()





@client_router.callback_query(F.data == "room1")
async def room1(callback: CallbackQuery):
    b = InlineKeyboardBuilder()
    media = [InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.aueoQ7a5xg6e6gQL8C4Cz8LhxAgW4kQG3ufEDBr2wgw.jpg"),
                    caption="<b>–ö–æ–º–Ω–∞—Ç–∞ 1</b>\n–ö–æ–º–Ω–∞—Ç–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–º –∏ –¥—É—à–µ–≤–æ–π. \n –ï—Å—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä\n –Ω–æ–º–µ—Ä —Ä–∞—Å—á–∏—Ç–∞–Ω –¥–æ 3—Ö —á–µ–ª–æ–≤–µ–∫",
                        parse_mode=ParseMode.HTML),
                        InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.gKuFMba5LEKzmO5HiUOVg--TLkQ7kK5K85UuQDeEKEA.fLf5q_ir1PtTgS1SXeydRd3mDR5lN_QQeSA0sIpxaJw.jpg")),
                            InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.sNglI7a5HDETit40SU2l8E-BHjebgp45U4ceM5eWGDM.L81i4I9NbvN6lglTGOZS7QyZ0JAF0z7a39J-I3m_HKg.jpg")), 
                            InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.u-uuo7a5FwKYCtUH1PXcw8QBFQQQApUK2AcVABwWEwA.JyXDDJVA6NsjryvmTZ5wkr6zj6beni77b-qArGSA94Q.jpg"))]
    b.button(text = "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data="order_start")
    b.button(text = "–°–ª–µ–¥—É—é—â–∞—è –∫–æ–º–Ω–∞—Ç–∞ ‚ñ∂Ô∏è", callback_data="room2")
    b.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="start_menu")
    b.adjust(1)
    await callback.message.answer_media_group(media=media)
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=b.as_markup())
    await callback.answer()







@client_router.callback_query(F.data == "room2")
async def room2(callback: CallbackQuery):
    b = InlineKeyboardBuilder()
    media = [InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.WorLUra59mP9-zRm83sDz6Pw9GV183Rrvfb0YXnn8mE.jpg"), 
                             caption="<b>–ö–æ–º–Ω–∞—Ç–∞ 2</b>\n–ö–æ–º–Ω–∞—Ç–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–º –∏ –¥—É—à–µ–≤–æ–π. \n –ï—Å—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä\n –Ω–æ–º–µ—Ä —Ä–∞—Å—á–∏—Ç–∞–Ω –¥–æ 2—Ö —á–µ–ª–æ–≤–µ–∫\n–î–∏–≤–∞–Ω —Ä–∞—Å—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ –±–æ–ª—å—à–æ–µ –¥–≤—É—Ö–º–µ—Å—Ç–Ω–æ–µ —Å–ø–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ", 
                             parse_mode=ParseMode.HTML), 
                             InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.2eC9T7a5dQmL5rcMg3iApdXtdw8D7vcBy-t3Cw_6cQs.nzp9R0Cfav5Y_OBDH5ynzqi696AXDsvaFcKbP-n37Q0.jpg")), 
                                                                         InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.L3lwora5g5BGC0GVIvoDURoAgZbOAwGYBgaBksIXh5I.gFEbS_DWbAFY2NVxn2R7mIZMsylfZBRNDheIgGdZ00I.jpg")), 
                                                                                         InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\dvor_room2.jpg"))]
    b.button(text = "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data="order_start")
    b.button(text = "–°–ª–µ–¥—É—é—â–∞—è –∫–æ–º–Ω–∞—Ç–∞ ‚ñ∂Ô∏è", callback_data="room3")
    b.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="start_menu")
    b.adjust(1)
    
    await callback.message.answer_media_group(media = media)
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=b.as_markup())
    await callback.answer()






@client_router.callback_query(F.data == "room3")
async def room3(callback: CallbackQuery):
    b = InlineKeyboardBuilder()
    media = [InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.aueoQ7a5xg6e6gQL8C4Cz8LhxAgW4kQG3ufEDBr2wgw.jpg"),
                    caption="<b>–ö–æ–º–Ω–∞—Ç–∞ 3</b>\n–ö–æ–º–Ω–∞—Ç–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–º –∏ –¥—É—à–µ–≤–æ–π. \n –ï—Å—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä\n –Ω–æ–º–µ—Ä —Ä–∞—Å—á–∏—Ç–∞–Ω –¥–æ 3—Ö —á–µ–ª–æ–≤–µ–∫",
                        parse_mode=ParseMode.HTML),
                        InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.gKuFMba5LEKzmO5HiUOVg--TLkQ7kK5K85UuQDeEKEA.fLf5q_ir1PtTgS1SXeydRd3mDR5lN_QQeSA0sIpxaJw.jpg")),
                            InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.sNglI7a5HDETit40SU2l8E-BHjebgp45U4ceM5eWGDM.L81i4I9NbvN6lglTGOZS7QyZ0JAF0z7a39J-I3m_HKg.jpg")), 
                            InputMediaPhoto(media=FSInputFile(r"C:\Projectori\Rental_bot\img\1.u-uuo7a5FwKYCtUH1PXcw8QBFQQQApUK2AcVABwWEwA.JyXDDJVA6NsjryvmTZ5wkr6zj6beni77b-qArGSA94Q.jpg"))]
    b.button(text = "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data="order_start")
    b.button(text = "–°–ª–µ–¥—É—é—â–∞—è –∫–æ–º–Ω–∞—Ç–∞ ‚ñ∂Ô∏è", callback_data="room1")
    b.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="start_menu")
    b.adjust(1)
    await callback.message.answer_media_group(media=media)
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=b.as_markup())
    await callback.answer()
    
    
    
    

@client_router.callback_query(F.data == "yard")
async def yard(cb: CallbackQuery):
    media = [InputMediaPhoto(media = FSInputFile(r"C:\Projectori\Rental_bot\img\yard1.jpg"),
                              caption="<b>–î–≤–æ—Ä</b>\n–í –Ω–∞—à–µ–º –ø—Ä–æ—Å—Ç–æ—Ä–Ω–æ–º –¥–≤–æ—Ä–µ –µ—Å—Ç—å, –º–∞–Ω–≥–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞, –±–æ–ª—å—à–∞—è –±–µ—Å–µ–¥–∫–∞ –∏ –æ–±—â–∞—è –∫—É—Ö–Ω—è —Å–æ –≤—Å–µ–π –Ω—É–∂–Ω–æ–π –ø–æ—Å—É–¥–æ–π",
                                parse_mode=ParseMode.HTML),
              InputMediaPhoto(media = FSInputFile(r"C:\Projectori\Rental_bot\img\yard2.jpg")),
                InputMediaPhoto(media = FSInputFile(r"C:\Projectori\Rental_bot\img\yard3.jpg")),
                InputMediaPhoto(media = FSInputFile(r"C:\Projectori\Rental_bot\img\yard4.jpg"))]
    await cb.message.answer_media_group(media = media)
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=go_order())
    await cb.answer()



@client_router.callback_query(F.data == "about")
async def about(cb: CallbackQuery):
    await cb.message.answer_photo(photo = "https://thumbs.dreamstime.com/b/%D0%B1%D0%B0%D0%B1%D1%83%D1%88%D0%BA%D0%B0-%D0%B2-%D0%BE%D1%87%D0%BA%D0%B0%D1%85-%D0%BE%D0%B1%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D1%82-%D0%B2%D0%BD%D1%83%D0%BA%D0%B0-%D0%BF%D0%B0%D1%80%D0%BA%D0%B5-%D0%BD%D0%B0-%D0%BF%D1%80%D0%BE%D0%B3%D1%83%D0%BB%D0%BA%D0%B5-370336011.jpg",
                                   caption="–ú—ã —Å –±–∞–±—É—à–∫–æ–π —Å–¥–∞–µ–º –¥–≤–æ—Ä —É–∂–µ –º–∏–ª–ª–∏–æ–Ω –ª–µ—Ç, –ø—Ä–∏–µ–∑–∂–∞–π—Ç–µ –µ–±–∞—Ç—å", 
                                   reply_markup=go_order())
    await cb.answer()





@client_router.callback_query(F.data == "popular_questions")
async def popular_questions(cb: CallbackQuery):
    await cb.message.answer_photo(photo = "https://cdn-icons-png.flaticon.com/512/25/25333.png",
                                   caption="–î–æ –º–æ—Ä—è 15 –º–∏–Ω—É—Ç", 
                                   reply_markup=go_order())
    
    await cb.answer()



class Booking(StatesGroup):
    wait_for_name = State()
    wait_for_date1 = State()
    wait_for_date2 = State()
    wait_for_rooms = State()
    wait_for_phone = State()
    wait_for_confirm = State()


AVAILABLE_ROOMS = ["1", "2", "3"]



def parse_date(s: str):
    try:
        return datetime.strptime(s.strip(), "%d.%m.%Y").date()
    except Exception:
        return None


async def is_room_free(session: AsyncSession, room_id: str, date_from: date, date_to: date) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥ [date_from, date_to)
    –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ–º:
        existing.date_from < new.date_to AND existing.date_to > new.date_from
    """
    q = select(Order).where(
        and_(
            Order.room == room_id,
            Order.date_from < date_to,
            Order.date_to > date_from
        )
    )
    res = await session.execute(q)
    return res.first() is None


def build_rooms_kb(selected: List[str]) -> types.InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    for r in AVAILABLE_ROOMS:
        prefix = "‚úÖ " if r in selected else ""
        b.button(text=f"{prefix}–ö–æ–º–Ω–∞—Ç–∞ {r}", callback_data=f"toggle_room:{r}")
    b.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="rooms_done")
    b.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="back_dates_to")
    b.button(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é üè°", callback_data="start_menu")
    b.adjust(3, 1, 1)
    return b.as_markup()



@client_router.callback_query(F.data == "order_start")
async def start_order(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Booking.wait_for_name)
    await cb.message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û")
    await cb.answer()



@client_router.message(Booking.wait_for_name, F.text & (F.text.len() > 1))
async def got_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û.")
        return

    await state.update_data(name=name)
    await state.set_state(Booking.wait_for_date1)
    b = InlineKeyboardBuilder()
    b.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="back_name")
    b.button(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é üè°", callback_data="start_menu")
    b.adjust(2)
    await message.answer("–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞? –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=b.as_markup())


@client_router.callback_query(F.data == "back_name")
async def back_name(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Booking.wait_for_name)
    await cb.message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û")
    await cb.answer()



@client_router.message(Booking.wait_for_date1, F.text)
async def got_date_from(message: Message, state: FSMContext):
    d = parse_date(message.text)
    if not d:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: 05.09.2025")
        return
    if d < date.today():
        await message.answer("–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return

    await state.update_data(date_from=d.isoformat())
    await state.set_state(Booking.wait_for_date2)

    b = InlineKeyboardBuilder()
    b.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="back_name")
    b.button(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é üè°", callback_data="start_menu")
    b.adjust(2)
    await message.answer("–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞? –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=b.as_markup())


@client_router.callback_query(F.data == "back_dates_from")
async def back_dates_from(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Booking.wait_for_date1)
    b = InlineKeyboardBuilder()
    b.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="back_name")
    b.button(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é üè°", callback_data="start_menu")
    b.adjust(2)
    await cb.message.answer("–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞? –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=b.as_markup())
    await cb.answer()



@client_router.message(Booking.wait_for_date2, F.text)
async def got_date_to(message: Message, state: FSMContext):
    d_to = parse_date(message.text)
    if not d_to:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: 12.09.2025")
        return

    data = await state.get_data()
    iso_from = data.get("date_from")
    if not iso_from:
        await message.answer("–ù–µ –≤–∏–∂—É –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /order")
        await state.clear()
        return

    d_from = datetime.fromisoformat(iso_from).date()
    if d_to <= d_from:
        await message.answer("–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–û–°–õ–ï –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(date_to=d_to.isoformat())
    await state.update_data(rooms=[])  
    await state.set_state(Booking.wait_for_rooms)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=build_rooms_kb([]))


@client_router.callback_query(F.data == "back_dates_to")
async def back_dates_to(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Booking.wait_for_date2)
    b = InlineKeyboardBuilder()
    b.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="back_dates_from")
    b.button(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é üè°", callback_data="start_menu")
    b.adjust(2)
    await cb.message.answer("–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞? –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=b.as_markup())
    await cb.answer()



@client_router.callback_query(Booking.wait_for_rooms, F.data.startswith("toggle_room:"))
async def toggle_room(cb: CallbackQuery, state: FSMContext):
    room = cb.data.split(":", 1)[1]
    data = await state.get_data()
    selected = data.get("rooms", [])
    if not isinstance(selected, list):
        selected = []

    if room in selected:
        selected.remove(room)
    else:
        selected.append(room)

    await state.update_data(rooms=selected)

    
    try:
        await cb.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n–í—ã–±—Ä–∞–Ω–æ: {', '.join(selected) if selected else '–Ω–∏—á–µ–≥–æ'}",
            reply_markup=build_rooms_kb(selected)
        )
    except Exception:
        
        await cb.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n–í—ã–±—Ä–∞–Ω–æ: {', '.join(selected) if selected else '–Ω–∏—á–µ–≥–æ'}",
            reply_markup=build_rooms_kb(selected)
        )
    await cb.answer()


@client_router.callback_query(Booking.wait_for_rooms, F.data == "rooms_done" or F.data == "rooms_done")
async def rooms_done(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    rooms = data.get("rooms", [])
    if not rooms:
        await cb.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–º–Ω–∞—Ç—É.", show_alert=True)
        return

    
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await cb.message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–æ–º–Ω–∞—Ç: {', '.join(rooms)}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=kb)
    await state.set_state(Booking.wait_for_phone)
    await cb.answer()



@client_router.message(Booking.wait_for_phone, F.contact)
async def got_contact(msg: Message, state: FSMContext):
    phone = msg.contact.phone_number
    await state.update_data(phone=phone)
    await msg.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä: {phone}", reply_markup=ReplyKeyboardRemove())

    
    await state.set_state(Booking.wait_for_confirm)
    data = await state.get_data()
    await msg.answer(
        "üìå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–ó–∞–µ–∑–¥: {data.get('date_from')}\n"
        f"–í—ã–µ–∑–¥: {data.get('date_to')}\n"
        f"–ö–æ–º–Ω–∞—Ç—ã: {', '.join(data.get('rooms', []))}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å?",
        reply_markup=InlineKeyboardBuilder()
            .button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm:yes")
            .button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm:no")
            .adjust(2)
            .as_markup()
    )



@client_router.message(Booking.wait_for_phone, F.text)
async def got_phone_text(msg: Message, state: FSMContext):
    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è +7... –∏–ª–∏ 10 —Ü–∏—Ñ—Ä
    txt = msg.text.strip()
    if not (txt.startswith("+") and len(txt) >= 10) and not txt.isdigit():
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return
    await state.update_data(phone=txt)
    await got_contact(msg, state)  



@client_router.callback_query(Booking.wait_for_confirm, F.data == "confirm:yes")
async def confirm_booking(cb: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    d_from = date.fromisoformat(data["date_from"])
    d_to = date.fromisoformat(data["date_to"])
    rooms = data.get("rooms", [])
    phone = data.get("phone")
    name = data.get("name")

    busy = []
    free = []
    for r in rooms:
        if await is_room_free(session, r, d_from, d_to):
            free.append(r)
        else:
            busy.append(r)

    if busy:
        
        await cb.message.answer("‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–Ω—è—Ç—ã: " + ", ".join(busy) +
                                "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞—Ç—ã.")
        await state.set_state(Booking.wait_for_rooms)
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=build_rooms_kb(data.get("rooms", [])))
        await cb.answer()
        return

    
    for r in free:
        order = Order(
            name=name,
            phone=phone,
            date_from=d_from,
            date_to=d_to,
            room=r
        )
        session.add(order)
    await session.commit()

    b = InlineKeyboardBuilder()
    b.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè°", callback_data="start_menu")
    b.adjust(1)  

    await cb.message.answer(
        "‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
        reply_markup=b.as_markup()
    )
    await state.clear()
    await cb.answer()


@client_router.callback_query(Booking.wait_for_confirm, F.data == "confirm:no")
async def cancel_booking(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚Äî /order")
    await state.clear()
    await cb.answer()





    
    
    

